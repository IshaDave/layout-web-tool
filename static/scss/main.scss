$font-size-h1: 1.75rem !default;
$font-size-h2: 1.25rem !default;
$font-size-h3: 1rem !default;
$font-size-base: 0.85rem !default;

$wizard-blue: #67798d;
$blue: $wizard-blue;
$enable-shadows: true;

// Core variables and mixins
@import '../../node_modules/bootstrap/scss/variables';
@import '../../node_modules/bootstrap/scss/mixins';
@import '../../node_modules/bootstrap/scss/custom';

// Reset and dependencies
@import '../../node_modules/bootstrap/scss/normalize';
@import '../../node_modules/bootstrap/scss/print';

// Core CSS
@import '../../node_modules/bootstrap/scss/reboot';
@import '../../node_modules/bootstrap/scss/type';
@import '../../node_modules/bootstrap/scss/images';
@import '../../node_modules/bootstrap/scss/code';
@import '../../node_modules/bootstrap/scss/grid';
@import '../../node_modules/bootstrap/scss/tables';
@import '../../node_modules/bootstrap/scss/forms';
@import '../../node_modules/bootstrap/scss/buttons';

// Components
@import '../../node_modules/bootstrap/scss/transitions';
@import '../../node_modules/bootstrap/scss/dropdown';
@import '../../node_modules/bootstrap/scss/button-group';
@import '../../node_modules/bootstrap/scss/input-group';
@import '../../node_modules/bootstrap/scss/custom-forms';
@import '../../node_modules/bootstrap/scss/nav';
@import '../../node_modules/bootstrap/scss/navbar';
@import '../../node_modules/bootstrap/scss/card';
@import '../../node_modules/bootstrap/scss/breadcrumb';
@import '../../node_modules/bootstrap/scss/pagination';
@import '../../node_modules/bootstrap/scss/badge';
@import '../../node_modules/bootstrap/scss/jumbotron';
@import '../../node_modules/bootstrap/scss/alert';
@import '../../node_modules/bootstrap/scss/progress';
@import '../../node_modules/bootstrap/scss/media';
@import '../../node_modules/bootstrap/scss/list-group';
@import '../../node_modules/bootstrap/scss/responsive-embed';
@import '../../node_modules/bootstrap/scss/close';

// Components w/ JavaScript
@import '../../node_modules/bootstrap/scss/modal';
@import '../../node_modules/bootstrap/scss/tooltip';
@import '../../node_modules/bootstrap/scss/popover';
@import '../../node_modules/bootstrap/scss/carousel';

// Utility classes
@import '../../node_modules/bootstrap/scss/utilities';

body {
  height:100vh;
  background-color: #f5f5f5;
}

.head {
  background: $wizard-blue;
  height: 100px;
}

.container {
  background-color: white;
  border: 1px solid #e3e3e3;
  margin-top: 20px;
  margin-bottom: 20px;
  padding: 40px 20px;
}

.inset {
  background-color: #f5f5f5;
  border: 1px solid #e3e3e3;
  @include box-shadow(inset 0 1px 1px rgba(0, 0, 0, 0.05));
}

.opt-form {
  @extend .inset;
  padding: 20px 30px 5px;

  // Special styles for custom opt-forms (not in the option grid)
  #custom-cmd-container & {
    margin-bottom: 20px;
  }
}

.template {
  display: none;
}

.input-group select {
  @extend .rounded-0;
  @extend .border-right-0;
}


// Responsive SVG trick (http://thenewcode.com/744/Make-SVG-Responsive)
.svg-container {
  @extend .inset;

  display: inline-block;
  position: relative;
  width: 100%;
  vertical-align: middle;
  overflow: hidden;
  height: 300px;

  .svg-content {
    display: inline-block;
    position: absolute;
    top: 0;
    left: 0;

    .node rect {
      stroke: black;
      stroke-width: 1px;
      fill: white;
      
    }

    .edgePath path {
      stroke: black;
      stroke-width: 1px;
    }
  }
}


.sort-container {
  @extend .row;
  @extend .inset;

  min-height: 40px;
  padding: 5px;

  // The sortable items are grid columns
  .sort-item {
    @extend .col-2;
    padding: 10px;

    .sort-item-content {
      @extend .text-center;
      border: 1px solid $wizard-blue;
      padding: 10px;
      &:after {
        left: 100%;
        margin: 0 -19px;
        content: ' ';
        position: absolute;
        width: 16px;
        height: 16px;
        // Fixme: there are better tricks to create arrows without using svg e.g. using css borders
        background: url("data:image/svg+xml;utf8,<svg width='16' height='16' xmlns='http://www.w3.org/2000/svg'><path d='M8 16  L16 8 L8 0' stroke='#67798d' stroke-width='1' fill='#f5f5f5'/></svg>") no-repeat;
      }
    }
  }

  // Dash the placeholder's border
  .sort-placeholder {
    @extend .col-2;
    padding: 10px;
    border: 1px dashed $wizard-blue;
  }
}


/********************
 Option Grid
 ********************/
.opt-row {
  .opt-cell {
    // Hack to prevent double horizontal borders
    margin-bottom: -1px;



    // The cell content showing logo, command and options
    // The form is a sibling of this element
    .opt-content {
      border: 1px solid lightgrey;

      // Place for a tool/command's logo
      // With SVG placeholder if no logo is specified
      .opt-logo {
        img {
          width: 30px;
          height: 30px;
          &:before {
              content: ' ';
              position: absolute;
              width: inherit;
              height: inherit;
              background: url("data:image/svg+xml;utf8,<svg width='30' height='30' xmlns='http://www.w3.org/2000/svg'> <g> <rect height='30' width='30' y='0' x='0' stroke-width='1' stroke='#BBB' fill='#DDD'/> <line y2='30' x2='30' y1='0' x1='0' stroke-width='0.5' stroke='#BBB'/> <line y2='30' x2='0' y1='0' x1='30' stroke-width='0.5' stroke='#BBB'/> </g></svg>") no-repeat;
          }
        }
      }

      // Change background on hover or expanded form
      &.active, &:hover {
        background-color: #f5f5f5;
      }
      // ... and also show bottom-centered SVG arrow
      &.active:after {
        left: 50%;
        margin: 0 -8px;
        content: ' ';
        position: absolute;
        width: 16px;
        height: 16px;
        z-index: 2;
        background: url("data:image/svg+xml;utf8,<svg width='16' height='16' xmlns='http://www.w3.org/2000/svg'><path d='M0 0  L8 8 L16 0' stroke='lightgrey' stroke-width='1' fill='#f5f5f5'/></svg>") no-repeat;
      }
    }

    // Breakpoints for cells for different screen widths
    // Note: We must define all available breakpoints in order
    // to use below mixin `media-breakpoint-only`
    $cells-per-breakpoint: (
      'xs': 6,
      'sm': 6,
      'md': 8,
      'lg': 12,
      'xl': 12
    );

    // Media Query Grid Magic:
    // All option cells are inside one Bootstrap `.row` div. Nevertheless, the
    // amount of cells actually displayed on a row depends on the screen width
    // and above definitions `cells-per-breakpoint` for each breakpoint.
    //
    // Depending on the cell per row count we
    // - define col-width of the cell,
    // - define width and offset of the form child of a cell,
    // - and identify the cells where we want to disable the left border to prevent
    //   double borders. (Note: We can't use the standard -1px margin trick here,
    //   as this would mess up the form's width and offset)

    // Iterate over breakpoints...
    @each $bp, $cnt in $cells-per-breakpoint {
      // ... use Bootstrap's media query mixin for different screen widths ...
      @include media-breakpoint-only($bp) {

        // ... customize columns width for cells ...
        @include make-col($grid-columns / $cnt);

        // ... define form width depending on cell count ...
        .opt-form-cont {
          width: $cnt * 100%;
        }

        // ... define form offset depending on cell count and
        // position ...
        @for $i from 1 through $cnt {
          &:nth-child(#{$cnt}n-#{$cnt - $i}) .opt-form-cont  {
            margin-left: ($i - 1) * -100%;
          }
        }

        // ... and disable left border for not-first childs in
        // a row to prevent double border.
        &:not(:nth-child(#{$cnt}n-#{$cnt - 1})) .opt-content {
          border-left: 0;
        }
      }
    }
  }
}